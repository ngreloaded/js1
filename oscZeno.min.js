function factorial(a) {
    return a > 170 ? strInf : 1 >= a ? 1 : a * factorial(a - 1)
}
var strNaN = "NaN", strInf = "Infinity", oscError, strMathError = "Math Error", strEmpty = 0, maxLength = 8, opCodeArray = [], stackArray = [], trigDisplay = "", openArray = [], stackVal1 = 1, stackVal2 = 0, opCode = 0, stackVal = 0, memVal = 0, boolClear=!0, newOpCode = 0, modeSelected = "deg", displayString = "";
$(document).ready(function() {
    function d(c) {
        if (2 == stackVal1 && b.val(""), 0 == stackVal1) {
            opCode = 0;
            var d = 1;
            switch (newOpCode) {
            case 5:
                d = 3;
                break;
            case 7:
                d = 5;
                break;
            case 8:
                d = 9
            }
            b.val(b.val().substring(0, b.val().length - d)), stackVal2 = 2
        }
        5 == stackVal1 || 2 == stackVal2 ? (stackVal2 = 0, displayString = b.val() + c) : displayString = b.val() + a.val() + c
    }
    function e() {
        for (; opCodeArray[0] && opCode;)
            if (10 == opCode) {
                if (opCode = opCodeArray[opCodeArray.length - 1], stackVal = stackArray[stackArray.length - 1], !(1 == newOpCode || 2 == newOpCode || opCode >= newOpCode)) {
                    opCode = 0;
                    break
                }
                opCodeArray.pop(), stackArray.pop()
            } else {
                if ("{" == stackArray[stackArray.length - 1])
                    break;
                    if (h(), stackVal = stackArray[stackArray.length - 1], "{" == stackVal) {
                        opCode = 0;
                        break
                    }
                    if (opCode = opCodeArray[opCodeArray.length - 1], !(1 == newOpCode || 2 == newOpCode || opCode >= newOpCode)) {
                        opCode = 0;
                        break
                    }
                    opCodeArray.pop(), stackArray.pop(), !opCodeArray[0] && stackArray.length > 0 && "{" != stackArray[stackArray.length - 1] && (stackVal = stackArray[stackArray.length - 1])
            }
    }
    function f() {
        10 != opCode && 0 != opCode && (opCodeArray.push(opCode), stackArray.push(stackVal)), 0 == opCode && stackArray.push(stackVal), opCode = 0
    }
    function g() {
        switch (stackVal1) {
        case 2:
            b.val("");
            break;
        case 3:
            b.val(b.val().substring(0, b.val().length - trigDisplay.length)), stackVal2 = 4;
            break;
        case 5:
            for (var a = "", c = openArray.length; c >= 0; c--)
                a += displayString.substring(0, displayString.indexOf("(") + 1), displayString = displayString.replace(a, "");
            displayString = a.substring(0, a.lastIndexOf("(")), b.val(displayString), stackVal2 = 6
        }
    }
    function h() {
        var a = $("#keyPad_UserInput"), b = parseFloat(a.val()), c = 0;
        switch (opCode) {
        case 1:
            stackVal += b;
            break;
        case 2:
            stackVal -= b;
            break;
        case 3:
            stackVal*=b;
            break;
        case 4:
            stackVal/=b;
            break;
        case 6:
            stackVal = Math.pow(stackVal, b);
            break;
        case 5:
            stackVal%=b;
            break;
        case 7:
            stackVal = l(stackVal, b);
            break;
        case 8:
            stackVal = Math.log(stackVal) / Math.log(b);
            break;
        case 0:
            stackVal = b
        }
        if (stackVal != strEmpty && stackVal != b) {
            if (c = stackVal, 0 != c.toFixed(8)%1)
                for (var d = 1; 10 > d;) {
                    if (0 != c.toFixed(d) && 1 == c.toFixed(d) / c.toFixed(d + 8)) {
                        c = c.toFixed(d);
                        break
                    }
                    d++
                } else 
                    c = c.toFixed(0);
            a.val(c)
        } else {
            if (c = stackVal, 0 != c.toFixed(8)%1)
                for (var d = 1; 10 > d;) {
                    if (0 != c.toFixed(d) && 0 == c.toFixed(d)%c.toFixed(d + 8)) {
                        c = c.toFixed(d);
                        break
                    }
                    d++
                } else 
                    c = c.toFixed(0);
            a.val(c)
        }
        boolClear=!0, a.focus()
    }
    function i(a) {
        return Math.log(a + Math.sqrt(a * a + 1))
    }
    function j(a, b) {
        var d = "d";
        "deg" != c && (d = "r"), k(a + d, b)
    }
    function k(a, b) {
        if (1 == stackVal2) {
            for (var c = "", d = openArray.length; d >= 0; d--)
                c += displayString.substring(0, displayString.indexOf("(") + 1), displayString = displayString.replace(c, "");
            displayString = c.substring(0, c.lastIndexOf("(")), trigDisplay = a + "(" + b + ")"
        }
        2 == stackVal2 || 3 == stackVal1 ? 3 == stackVal2 ? (trigDisplay = a + "(" + b + ")", stackVal2 = 2) : (displayString = displayString.replace(trigDisplay, ""), trigDisplay = a + "(" + trigDisplay + ")") : (4 == stackVal2 && (displayString = ""), trigDisplay = a + "(" + b + ")"), displayString += trigDisplay
    }
    function l(a, b) {
        try {
            var c = 1 == b%2 && 0 > a;
            c && (a =- a);
            var d = Math.pow(a, 1 / b);
            return b = Math.pow(d, b), Math.abs(a - b) < 1 && a > 0 == b > 0 ? c?-d : d : c?-d : d
        } catch (e) {}
    }
    function m(a, b) {
        return "deg" == a ? b * (Math.PI / 180) : "rad" == a ? b : void 0
    }
    function n(a, b) {
        var c = m(a, b);
        return "0" == c%(Math.PI / 2) ? "0" == c / (Math.PI / 2)%2 ? "0" : strMathError : Math.tan(c)
    }
    function o(a, b) {
        var c = m(a, b);
        return "0" == c.toFixed(8)%(Math.PI / 2).toFixed(8) ? "0" == (c.toFixed(8) / (Math.PI / 2)).toFixed(8)%2 ? Math.cos(c) : "0" : Math.cos(c)
    }
    function p(a, b) {
        var c = m(a, b);
        return 0 == (c.toFixed(8)%Math.PI).toFixed(8) ? "0" : Math.sin(c)
    }
    function q(a, b) {
        var c = n(a, b);
        return 0 == c ? strMathError : c == strMathError ? "0" : 1 / c
    }
    function r(a, b) {
        var c = o(a, b);
        return 0 == c.toFixed(8) ? strMathError : 1 / c
    }
    function s(a, b) {
        var c = p(a, b);
        return 0 == c.toFixed(8) ? strMathError : 1 / c
    }
    function t(a, b) {
        return "deg" == a ? 180 / Math.PI * b : b
    }
    function u(a, b) {
        var c, d = Math.asin(b);
        return c = strNaN.indexOf(d.toFixed(8))>-1 ? strMathError : t(a, d)
    }
    function v(a, b) {
        var c, d = Math.acos(b);
        return c = strNaN.indexOf(d.toFixed(8))>-1 ? strMathError : t(a, d)
    }
    function w(a, b) {
        var c, d = Math.atan(b);
        return c = strNaN.indexOf(d.toFixed(8))>-1 ? strMathError : t(a, d)
    }
    var a = $("#keyPad_UserInput"), b = $("#keyPad_UserInput1"), c = $("input[name=degree_or_radian]:radio:checked").val();
    $("#keyPad_UserInput").val(strEmpty), $("div#keyPad a.keyPad_btnNumeric").click(function() {
        var a = $(this).html(), b = $("#keyPad_UserInput");
        if ($("#keyPad_UserInput1"), !(b.val().indexOf("Infinity")>-1 || b.val().indexOf(strMathError)>-1)) {
            boolClear && (b.val(strEmpty), boolClear=!1);
            var d = b.val();
            d.length > maxLength || "keyPad_btnDot" == this.id && d.indexOf(".") >= 0 || (g(), d != strEmpty || d.length > 1 || "keyPad_btnDot" == this.id ? (b.val(d + a), stackVal1 = 1) : (b.val(a), stackVal1 = 1), b.focus())
        }
    }), $("a.keyPad_btnConst").click(function() {
        var b = strEmpty, c = $("#keyPad_UserInput");
        if ($("#keyPad_UserInput1"), !(a.val().indexOf("Infinity")>-1 || a.val().indexOf(strMathError)>-1)) {
            switch (this.id) {
            case"keyPad_btnPi":
                b = Math.PI;
                break;
            case"keyPad_btnPiDiv2":
                b = Math.PI / 2;
                break;
            case"keyPad_btnPiDiv3":
                b = Math.PI / 3;
                break;
            case"keyPad_btnPiDiv4":
                b = Math.PI / 4;
                break;
            case"keyPad_btnPiDiv6":
                b = Math.PI / 6;
                break;
            case"keyPad_btnE":
                b = Math.E;
                break;
            case"keyPad_btnInvE":
                b = 1 / Math.E;
                break;
            case"keyPad_btnSqrt2":
                b = Math.SQRT2;
                break;
            case"keyPad_btnSqrt3":
                b = Math.sqrt(3);
                break;
            case"keyPad_btnCubeRoot2":
                b = Math.pow(2, 1 / 3);
                break;
            case"keyPad_btnLn10":
                b = Math.LN10;
                break;
            case"keyPad_btnLgE":
                b = Math.LOG10E;
                break;
            case"keyPad_btnSigma":
                b = .69;
                break;
            case"keyPad_btnSigma3":
                b = .007;
                break;
            case"keyPad_btnSigma6":
                b = 3.4 * Math.pow(10, - 6)
            }
            g(), stackVal1 = 1, boolClear=!0, b != strEmpty ? $(keyPad_UserInput).val(b) : $(keyPad_UserInput).val(b), c.focus()
        }
    }), $("div#keyPad a.keyPad_btnBinaryOp").click(function() {
        if (!(a.val().indexOf("Infinity")>-1 || a.val().indexOf(strMathError)>-1)) {
            switch (this.id) {
            case"keyPad_btnPlus":
                d($("#" + this.id).text()), newOpCode = 1, e(), stackVal1 = 0;
                break;
            case"keyPad_btnMinus":
                d($("#" + this.id).text()), newOpCode = 2, e(), stackVal1 = 0;
                break;
            case"keyPad_btnMult":
                d($("#" + this.id).text()), newOpCode = 3, (1 == opCode || 2 == opCode) && f(), 10 == opCode && (opCodeArray[opCodeArray.length - 1] < 3 ? f() : e()), stackVal1 = 0;
                break;
            case"keyPad_btnDiv":
                d($("#" + this.id).text()), newOpCode = 4, 4 > opCode && opCode && f(), 10 == opCode && (opCodeArray[opCodeArray.length - 1] < 4 ? f() : e()), stackVal1 = 0;
                break;
            case"keyPad_btnYpowX":
                d("^"), newOpCode = 6, 6 > opCode && opCode && f(), 10 == opCode && (opCodeArray[opCodeArray.length - 1] < 6 ? f() : e()), stackVal1 = 0;
                break;
            case"keyPad_btnMod":
                d($("#" + this.id).text()), newOpCode = 5, (1 == opCode || 2 == opCode) && f(), 10 == opCode && f(), stackVal1 = 0;
                break;
            case"keyPad_btnYrootX":
                d("yroot"), newOpCode = 7, 6 > opCode && opCode && f(), 10 == opCode && (opCodeArray[opCodeArray.length - 1] < 6 ? f() : e()), stackVal1 = 0;
                break;
            case"keyPad_btnYlogX":
                d("logxBasey"), newOpCode = 8, (1 == opCode || 2 == opCode) && f(), 10 == opCode && (opCodeArray[opCodeArray.length - 1] < 3 ? f() : e()), stackVal1 = 0;
                break;
            case"keyPad_btnOpen":
                displayString = b.val() + $("#" + this.id).text(), newOpCode = 0, a.val(0), 0 != opCode && f(), openArray.push("{"), stackArray.push("{"), stackVal1 = 1;
                break;
            case"keyPad_btnClose":
                if (6 == stackVal2 ? (stackVal = parseFloat(a.val()), displayString = b.val() + a.val() + $("#" + this.id).text()) : displayString = 10 != newOpCode ? 3 != stackVal1 ? b.val() + a.val() + $("#" + this.id).text() : b.val() + $("#" + this.id).text() : b.val() + $("#" + this.id).text(), !openArray[0])
                    return;
                for (openArray.pop(), newOpCode = 10; opCodeArray[0] || openArray[0];) {
                    if ("{" == stackArray[stackArray.length - 1]) {
                        stackArray.pop();
                        break
                    }
                    if (h(), stackVal = stackArray[stackArray.length - 1], "{" == stackVal) {
                        stackArray.pop(), opCode = 0;
                        break
                    }
                    stackArray.pop(), opCode = opCodeArray[opCodeArray.length - 1], opCodeArray.pop(), !opCodeArray[0] && stackArray.length > 0 && "{" != stackArray[stackArray.length - 1] && (stackVal = stackArray[stackArray.length - 1])
                }
                stackVal2 = 1, stackVal1 = 5;
                break;
            case"keyPad_btnPercent":
                if (1 == opCode || 2 == opCode)
                    a.val(stackVal * parseFloat(a.val()) / 100);
                else {
                    if (3 != opCode && 4 != opCode)
                        return;
                    a.val(parseFloat(a.val()) / 100)
                }
            }
            opCode ? h() : (stackVal = parseFloat(a.val()), boolClear=!0), opCode = newOpCode, a.focus(), b.val(displayString)
        }
    }), $("a.keyPad_btnUnaryOp").click(function() {
        var d = $("#keyPad_UserInput"), e = parseFloat(d.val()), f = oscError;
        if (!(a.val().indexOf("Infinity")>-1 || a.val().indexOf(strMathError)>-1)) {
            switch (this.id) {
            case"keyPad_btnInverseSign":
                f =- e, stackVal2 = 3;
                break;
            case"keyPad_btnInverse":
                f = 1 / e, k("reciproc", e);
                break;
            case"keyPad_btnSquare":
                f = e * e, k("sqr", e);
                break;
            case"keyPad_btnSquareRoot":
                f = Math.sqrt(e), k("sqrt", e);
                break;
            case"keyPad_btnCube":
                f = e * e * e, k("cube", e);
                break;
            case"keyPad_btnCubeRoot":
                f = l(e, 3), k("cuberoot", e);
                break;
            case"keyPad_btnLn":
                f = Math.log(e), k($("#" + this.id).text(), e);
                break;
            case"keyPad_btnLg":
                f = Math.log(e) / Math.LN10, k($("#" + this.id).text(), e);
                break;
            case"keyPad_btnExp":
                f = Math.exp(e), k("powe", e);
                break;
            case"keyPad_btnSin":
                f = p(c, e), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnCosin":
                f = o(c, e), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnTg":
                f = n(c, e), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnCtg":
                f = q(c, e), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnFact":
                f = factorial(e), k("fact", e);
                break;
            case"keyPad_btn10X":
                f = Math.pow(10, e), k("powten", e);
                break;
            case"keyPad_btnAsinH":
                f = i(e), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnAcosH":
                f = Math.log(e + Math.sqrt(e + 1) * Math.sqrt(e - 1)), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnAtanH":
                f = .5 * (Math.log(1 + e) - Math.log(1 - e)), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnAbs":
                f = Math.abs(e), k("abs", e);
                break;
            case"keyPad_btnLogBase2":
                f = Math.log(e) / Math.log(2), k("logXbase2", e);
                break;
            case"keyPad_btnAsin":
                f = u(c, e), j("asin", e);
                break;
            case"keyPad_btnAcos":
                f = v(c, e), j("acos", e);
                break;
            case"keyPad_btnAtan":
                f = w(c, e), j("atan", e);
                break;
            case"keyPad_btnSec":
                f = r(c, e);
                break;
            case"keyPad_btnCosec":
                f = s(c, e);
                break;
            case"keyPad_btnSinH":
                f = (Math.pow(Math.E, e) - Math.pow(Math.E, - e)) / 2, j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnCosinH":
                f = (Math.pow(Math.E, e) + Math.pow(Math.E, - e)) / 2, j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnTgH":
                f = Math.pow(Math.E, e) - Math.pow(Math.E, - e), f/=Math.pow(Math.E, e) + Math.pow(Math.E, - e), j($("#" + this.id).text(), e);
                break;
            case"keyPad_btnSecH":
                f = 2 / (Math.pow(Math.E, e) + Math.pow(Math.E, - e));
                break;
            case"keyPad_btnCosecH":
                f = 2 / (Math.pow(Math.E, e) - Math.pow(Math.E, - e));
                break;
            case"keyPad_btnOnePlusX":
                f = 1 + e;
                break;
            case"keyPad_btnOneMinusX":
                f = 1 - e
            }
            if (1 == stackVal2 && (stackVal = f), 3 != stackVal2 && (stackVal2 = 2), stackVal1 = 3, boolClear=!0, 0 == f || f == strMathError || f == strInf)
                d.val(f);
            else {
                if (0 != f.toFixed(8)%1)
                    for (var g = 1; 10 > g;) {
                        if (0 != f.toFixed(g) && 0 == f.toFixed(g)%f.toFixed(g + 8)) {
                            f = f.toFixed(g);
                            break
                        }
                        g++
                    } else 
                        f = f.toFixed(0);
                d.val(f)
            }
            b.val(displayString), d.focus()
        }
    }), $("div.degree_radian").click(function() {
        c = $("input[name=degree_or_radian]:radio:checked").val()
    }), $("div#keyPad a.keyPad_btnCommand").click(function() {
        var a = $("#keyPad_UserInput"), b = $("#keyPad_UserInput1"), c = a.val();
        switch (this.id) {
        case"keyPad_btnEnter":
            if (a.val().indexOf("Infinity")>-1 || a.val().indexOf(strMathError)>-1)
                return;
            for (; opCode || opCodeArray[0];)
                "{" == stackArray[stackArray.length - 1] && stackArray.pop(), h(), stackVal = stackArray[stackArray.length - 1], opCode = opCodeArray[opCodeArray.length - 1], stackArray.pop(), opCodeArray.pop();
            return opCode = 0, a.focus(), displayString = "", trigDisplay = "", stackVal = strEmpty, openArray = [], 2 != stackVal1 && ((3 == stackVal1 || 1 == stackVal2) && (c = ""), b.val(b.val() + c)), stackVal1 = 2, newOpCode = 0, stackVal2 = 0, stackArray = [], opCodeArray = [], void 0;
        case"keyPad_btnClr":
            if (a.val().indexOf("Infinity")>-1 || a.val().indexOf(strMathError)>-1)
                return;
            c == strEmpty ? (opCode = 0, boolClear=!1) : a.val(strEmpty);
            break;
        case"keyPad_btnBack":
            if (1 == stackVal1 || 3 == stackVal2) {
                if (c.length > 1) {
                    if (a.val().indexOf("Infinity")>-1 || a.val().indexOf(strMathError)>-1)
                        return;
                    a.val(c.substring(0, c.length - 1)), "-" == a.val() && a.val("0");
                    break
                }
                a.val("0");
                break
            }
            break;
        case"keyPad_btnAllClr":
            a.val(strEmpty), displayString = "", trigDisplay = "", stackArray = [], opCodeArray = [], openArray = [], b.val(""), stackVal = strEmpty, stackVal1 = 1, stackVal2 = 0, newOpCode = 0, opCode = 0
        }
    })
});
